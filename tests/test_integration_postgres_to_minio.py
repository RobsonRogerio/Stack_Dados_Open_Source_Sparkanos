import pytest
import psycopg2
from psycopg2 import OperationalError
from minio import Minio, S3Error
from datetime import datetime
import polars as pl
import io
from io import StringIO
import logging
from dotenv import load_dotenv
import os

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestPostgresToMinio:

    @pytest.mark.integration
    def configure_args(self):
        """Returns configuration arguments such as the filename."""
        current_date = datetime.now().strftime("%Y%m%d")
        filename = f"test_postgres{current_date}.csv"
        return "landing", filename
    
    @pytest.mark.integration
    def test_connect_postgres(self):
        """Tests the connection to the PostgreSQL database."""
        logger.info("Testing connection to PostgreSQL")
        connection = self.create_connection()
        assert connection is not None, "Failed to connect to PostgreSQL"
        logger.info("Successfully connected to PostgreSQL")

    @pytest.mark.integration
    def test_connect_minio(self):
        """Tests the connection to the MinIO client."""
        logger.info("Testing connection to MinIO")
        client = self.connect_minio()
        assert client is not None, "Failed to connect to MinIO"
        logger.info("Successfully connected to MinIO")

    @pytest.mark.integration
    def test_execute_etl(self):
        """Executes the ETL process: extracts data from PostgreSQL and loads it into MinIO."""
        logger.info("Extracting data from PostgreSQL")
    
        connection = self.create_connection()
        try:
            query = "SELECT * FROM tb_integration_test"
            data_frame = pl.read_database(query, connection)
            logger.info("Data extracted from PostgreSQL")
        except Exception as e:
            logger.error(f"Error extracting data from PostgreSQL: {e}")
            pytest.fail(f"Error extracting data from PostgreSQL: {e}")
        finally:
            connection.close()

        current_date = datetime.now().strftime("%Y%m%d")
        filename = f"test_postgres{current_date}.csv"
        csv_buffer = io.StringIO()
        
        try:
            data_frame.write_csv(csv_buffer)
            csv_buffer.seek(0)
            logger.info(f"Data converted to CSV: {filename}")
        except Exception as e:
            logger.error(f"Error converting data to CSV: {e}")
            pytest.fail(f"Error converting data to CSV: {e}")
        
        client = self.connect_minio()
        try:
            client.put_object(
                bucket_name="landing",
                object_name=filename,
                data=io.BytesIO(csv_buffer.getvalue().encode('utf-8')),
                length=len(csv_buffer.getvalue()),
                content_type="application/csv"
            )
            logger.info(f"File {filename} uploaded to MinIO successfully")
        except Exception as e:
            logger.error(f"Error uploading file to MinIO: {e}")
            pytest.fail(f"Error uploading file to MinIO: {e}")

    @pytest.mark.integration
    def test_file_exists_in_minio(self):
        """Tests that the file generated by the ETL process exists in MinIO."""
        logger.info("Checking if file exists in MinIO")
        client = self.connect_minio()
        _, filename = self.configure_args()
        self.file_exists_in_minio(client, filename)

    @pytest.mark.integration
    def test_file_not_empty_in_minio(self):
        """Tests that the file generated by the ETL process is not empty in MinIO."""
        logger.info("Checking if file in MinIO is not empty")
        client = self.connect_minio()
        _, filename = self.configure_args()
        self.file_not_empty_in_minio(client, filename)

    @pytest.mark.integration
    def create_connection(self):
        """Creates and returns a connection to the PostgreSQL database."""
        try:
            connection = psycopg2.connect(
                host=os.getenv('HOST'),
                port=os.getenv('PORT_POSTGRES'),
                user=os.getenv('USER_POSTGRES'),
                password=os.getenv('PASSWORD_POSTGRES'),
                database=os.getenv('DATABASE'),
            )
            return connection
        except OperationalError as e:
            logger.error(f"Error connecting to PostgreSQL: {e}")
            pytest.fail(f"Error connecting to PostgreSQL: {e}")

    @pytest.mark.integration
    def connect_minio(self):
        """Establishes and returns a connection to the MinIO client."""
        try:
            client = Minio(
                os.getenv('HOST') + ":9000",
                access_key=os.getenv('MINIO_USER'),
                secret_key=os.getenv('MINIO_PASSWORD'),
                secure=False,
            )
            client.list_buckets()
            logger.info("Connected to MinIO successfully")
            return client
        except S3Error as e:
            logger.error(f"Failed to connect to MinIO: {e}")
            raise ConnectionError(f"Failed to connect to MinIO: {e}")

    @pytest.mark.integration
    def file_exists_in_minio(self, client, filename):
        """Checks if the specified file exists in MinIO."""
        try:
            found = client.stat_object("landing", filename)
            assert found is not None, f"File {filename} not found in MinIO"
            logger.info(f"File {filename} exists in MinIO")
        except Exception as e:
            logger.error(f"Error checking file in MinIO: {e}")
            pytest.fail(f"Error checking file in MinIO: {e}")

    @pytest.mark.integration
    def file_not_empty_in_minio(self, client, filename):
        """Checks if the specified file in MinIO is not empty."""
        try:
            response = client.get_object("landing", filename)
            file_content = io.StringIO(response.read().decode("utf-8"))
            data = pl.read_csv(file_content)
            assert len(data) > 0, "The CSV file is empty"
            logger.info(f"File {filename} is not empty in MinIO")
            response.close()
        except Exception as e:
            logger.error(f"Error verifying file in MinIO: {e}")
            pytest.fail(f"Error verifying file in MinIO: {e}")

if __name__ == '__main__':
        test_connect_postgres()
        test_connect_minio()
        test_execute_etl()
        test_file_exists_in_minio()
        test_file_not_empty_in_minio()
